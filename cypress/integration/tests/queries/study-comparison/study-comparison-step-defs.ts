import { When, And, Then, Given } from 'cypress-cucumber-preprocessor/steps';
import { randomString } from '../../../../support/commands';
import GraphicalQueryPage from '../../../pageobjects/graphical-query/graphical-query-page';
import ManageStudiesPage from '../../../pageobjects/studies/manage-studies-page';
import CreateStudyPage from '../../../pageobjects/studies/create-study-page';
import ManageObservationsPage from '../../../pageobjects/studies/manage-observations-page';

const graphicalQueryPage = new GraphicalQueryPage();
const manageStudiesPage = new ManageStudiesPage();
const createStudyPage = new CreateStudyPage();
const manageObservationsPage = new ManageObservationsPage();

const newStudyName = 'Study-' + Math.random().toString(20).replace(/[^a-z]+/g, '');
const traitName = "Aflatox_M_ppb";

And('added another study that have observations for the same traits',  () => {
    manageStudiesPage.startNewStudy();
    createStudyPage.saveNewStudyWithRCBDDesign(newStudyName,
        'Study with Randomized Complete Block Design',
        'Trial', 'This is an autogenerated study from Cypress e2e testing.');
    createStudyPage.addTrait(traitName);
    manageObservationsPage.addTraitObservations(traitName);
});

When('I selected multiple study names with existing observations',  () => {
    graphicalQueryPage.selectStudyName(Cypress.env('rcbdStudy'));
    graphicalQueryPage.addStudyName(newStudyName);
});

And('I selected PLOT as observation level',  () => {
    graphicalQueryPage.selectObservationLevel();
});

And('I loaded the query by study comparison',  () => {
    graphicalQueryPage.selectStudyComparisonQueryType();
    graphicalQueryPage.clickLoadQuery();
});

And('I selected variable to compare',  () => {
    graphicalQueryPage.selectVariableToCompare('Aflatox_M_ppb');
});

And('I proceed with the comparison',  () => {
    graphicalQueryPage.clickCompareVariable();
});

Then('I should be able to see graphs that shows the details of comparison of the selected studies',  () => {
    graphicalQueryPage.verifyDisplayedGraph();
});
