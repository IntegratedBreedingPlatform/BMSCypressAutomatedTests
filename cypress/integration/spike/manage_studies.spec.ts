/// <reference types="cypress-xpath" />
describe('Manage Studies', () => {

    // TODO: use data-test=”unique_value” as selectors
    context('Create a new study', () => {

        const studyName = 'Study-' + Math.random().toString(20).replace(/[^a-z]+/g, '');
        const studyDescription = 'Study with Randomized Complete Block Design';
        const studyType = 'Trial';
        const objective = 'This is an autogenerated study from Cypress e2e testing.';
        const startDate = '2020-01-01';
        const endDate = '2021-01-01';

    	beforeEach(() => {
			cy.login();
		})

		it('Should create a new study with Randomized Complete Block Design', () => {
            selectCropAndProgram();
            selectSidebarWithCategoryAndName('Studies', 'Manage Studies');
            // Open Create Study page
            openCreateStudyPage();

            // Wait for Create New Study Page to Load
            cy.get('mat-sidenav-content > iframe').waitIframeToLoad().then(($iframeBody) => {
                // Enter Basic Details
                enterBasicDetails(studyName, studyDescription, studyType, objective, startDate, endDate);
                // Change Folder
                openChangeFolderModal('Studies');
                // Open Add Study Level Settings Modalnpm
                openStudyLevelSettingsModal();
                // Select Variable In Manage Settings Modal
                manageSettingsModal('Add Study-Level Settings', 'PI_NAME');
                // Select Admin user from PI_NAME dropdown
                specifyStudyLevelSettingDropdown('PI_NAME', 'Admin Admin');
                // Save the study
                saveStudy();
            });

            // Wait for Study Page to Load
            cy.get('mat-sidenav-content > iframe').waitIframeToLoad().then(($iframeBody) => {
                // Show Tab By Name    Germplasm & Checks
                showTabByName('Germplasm & Checks');
                // Browse And Select Germplasm List
                browseAndSelectGermplasmList();
                // Show Tab By Name    Treatment Factors
                showTabByName('Treatment Factors');
                // Open Add Treatment Factors Modal
                openTreatmentFactorModal();
                // Select Variable In Manage Settings Modal    Add a Treatment Factor  NFert_kg_ha
                manageSettingsModal('Add a Treatment Factor', 'NFert_kg_ha');
                specifyTreatmentLabelAndSize('NFert_kg_ha', 'NFERT_NO', '2');
                specifyTreatmentValue('NFERT_NO 1', '1');
                specifyTreatmentValue('NFERT_NO 2', '2');
                // Add environments
                showTabByName('Environments');
                specifyTheNumberOfEnvironments('5');
                //     Open Add Environment Details Modal
                openEnvironmentDetailsModal();
                manageSettingsModal('Add Study-Level Settings', 'Crop_season_Code');
                //Open Add Environmental Conditions Modal
                openEnvironmentConditionsModal();
                manageSettingsModalWithoutSearch('Add Environmental Conditions', 'SITE_SOIL_PH');

                // Reload the Environments tab to make sure the Environments table are loaded properly, so that editing the variable
                // values will not fail.
                showTabByName('Treatment Factors');
                showTabByName('Environments');

                specifyLocationNameForEnvironment('1', 'CENTER FOR INTERNATIONAL FORESTRY RESEARCH');
                specifyLocationNameForEnvironment('2', 'INT CENTER FOR AGRICULTURAL RES IN THE DRY AREAS');
                specifyLocationNameForEnvironment('3', 'INT CENTER FOR RESEARCH IN AGROFORSTRY');
                specifyLocationNameForEnvironment('4', 'INT CENTER FOR THE IMPROVEMENT OF MAIZE AND WHEAT');
                specifyLocationNameForEnvironment('5', 'Centro Internacional de Agricultura Tropical');

                specifyEnvironmentTableCellDropdown('1', '5', 'Dry season');
                specifyEnvironmentTableCellDropdown('2', '5', 'Wet season');
                specifyEnvironmentTableCellDropdown('3', '5', 'Dry season');
                specifyEnvironmentTableCellDropdown('4', '5', 'Wet season');
                specifyEnvironmentTableCellDropdown('5', '5', 'Dry season');

                specifyEnvironmentTableCellNumeric('1', '6', '1.0');
                specifyEnvironmentTableCellNumeric('2', '6', '2.0');
                specifyEnvironmentTableCellNumeric('3', '6', '3.0');
                specifyEnvironmentTableCellNumeric('4', '6', '4.0');
                specifyEnvironmentTableCellNumeric('5', '6', '5.0');

                // Generate Randomized Complete Block Design
                showTabByName('Experimental Design');
                generateRCBDesign('1', '2');

            });

             // Wait for Study Page to Load
            cy.get('mat-sidenav-content > iframe').waitIframeToLoad().then(($iframeBody) => {
                showTabByName('Observations');
                //  Open Add Traits Modal
                openTraitsModal();
                manageSettingsModal('Add Traits', 'GW_DW_g100grn');
                openTraitsModal();
                manageSettingsModal('Add Traits', 'GW_DW_g1000grn');

                // Open Add Selections Modal
                openSelectionsModal();
                manageSettingsModalWithoutSearch('Add Selections', 'NPSEL');

                specifyObservationTableCellNumericValue('1', '11', '101');
                specifyObservationTableCellNumericValue('1', '12', '102');
                specifyObservationTableCellNumericValue('1', '13', '103');
                specifyObservationTableCellNumericValue('2', '11', '104');
                specifyObservationTableCellNumericValue('2', '12', '105');
                specifyObservationTableCellNumericValue('2', '13', '106');

            });


		});

    });

});

const selectCropAndProgram = () => {
    context('Select Crop and Program', () => {
        getIframeBody().find('#cropDropdown select').should('exist').select('maize', { force : true });
        getIframeBody().find('#cropDropdown select').should('have.value', 'maize');
        getIframeBody().find('jhi-program > section > div:nth-child(1) > div.col-sm-4 > form > div:nth-child(2) > div.col-sm-auto > button').should('exist').click();
    });
}

const getProgramsIframeDocument = () => {
    // TODO: use data-test=”unique_value” as selectors
    return cy.get('mat-sidenav-content > iframe').its('0.contentDocument').should('exist');
}

const getIframeBody = () => {
    return getProgramsIframeDocument().its('body').should('not.be.undefined').then(cy.wrap);
}

const selectSidebarWithCategoryAndName = (category:string, subCategory:string) => {
    // Expand sidebar category
    cy.xpath(`//mat-tree-node[contains(text(), ' ${category} ')]`).should('exist').click();
    // Then click the sidebar category child
    cy.xpath(`//mat-tree-node[contains(text(), ' ${subCategory} ')]`).should('exist').click();
}

const openCreateStudyPage = () => {
    cy.get('mat-sidenav-content > iframe').waitIframeToLoad().then(($iframeBody) => {
        cy.wrap($iframeBody).xpath(`//a[contains(text(),'Start a New Study')]`).click();
    });
}

const enterBasicDetails = (studyName: string, studyDescription: string, studyType: string, objective: string, startDate: string, endDate: string) => {
    getIframeBody().xpath('//input[@ng-model="data.studyName"]').type(studyName);
    getIframeBody().xpath('//input[@ng-model="data.description"]').type(studyDescription);
    getIframeBody().xpath('//select[@id="studyTypeId"]').select(studyType, { force : true });
    getIframeBody().xpath('//textarea[@ng-model="data.objective"]').type(objective);
    getIframeBody().xpath('//input[@ng-model="data.startDate"]').clear({ force : true }).type(startDate, { force : true });
    getIframeBody().xpath('//input[@ng-model="data.endDate"]').clear({ force : true }).type(endDate, { force : true });
}

const openChangeFolderModal = (folderName:string) => {
    getIframeBody().xpath(`//a[text()='Change Folder']`).click();
    getIframeBody().xpath("//div[@id='studyTreeModal']//label[text()='Browse Studies']").should('be.visible');
    getIframeBody().xpath(`//a[@class='dynatree-title' and text()='${folderName}']`).should('be.visible').click({force:true});
    getIframeBody().xpath(`//div[@id='studyTreeModal']//button[text()='Select']`).click({force:true});
}


const openStudyLevelSettingsModal = () => {
    getIframeBody().xpath(`//div[@id='manage-study-tabs']//span[contains(text(), 'Add')]`).should('be.visible').click();
}

const openTreatmentFactorModal = () => {
    getIframeBody().xpath(`//section-container[@heading='TREATMENT FACTORS']//span[contains(text(), 'Add')]`).should('be.visible').click();
}

const openEnvironmentDetailsModal = () => {
    getIframeBody().xpath(`//span[@variable-type='1806' and text()='Add']`).should('be.visible').click();
}

const openEnvironmentConditionsModal = () => {
    getIframeBody().xpath(`//span[@variable-type='1802' and text()='Add']`).should('be.visible').click();
}

const openTraitsModal = () => {
    getIframeBody().xpath(`//span[@variable-type='1808' and text()='Add']`).should('be.visible').click();
}

const openSelectionsModal = () => {
    getIframeBody().xpath(`//span[@variable-type='1807' and text()='Add']`).should('be.visible').click();
}

const manageSettingsModal = (headerName:string, variableName:string) => {
    getIframeBody().xpath(`//h4[contains(text(), '${headerName}')]`, {timeout: 15000}).should('be.visible');
    // Trigger variable search dropdown
    getIframeBody().xpath(`//body/div[3]/div/div/div[7]/div/div/div/div/div/div[2]/div[1]/div/a`).should('be.visible').click();
    // Search variable name
    getIframeBody().xpath(`//div[@class='select2-search']//input`).should('be.visible').type(variableName);
    // Select the first result
    getIframeBody().xpath(`//div[contains(@class,'select2-with-searchbox')]//ul[@class='select2-results']/li`).should('be.visible').click();
    // Add the item from result
    getIframeBody().xpath(`//span[text()='${variableName}']/parent::span/parent::span//span[contains(text(), 'Add')]`).click();
    // Close the modal
    getIframeBody().xpath(`//button[contains(text(), 'Close')]`).should('be.visible').click();
}

const manageSettingsModalWithoutSearch = (headerName:string, variableName:string) => {
    getIframeBody().xpath(`//h4[contains(text(), '${headerName}')]`, {timeout: 15000}).should('be.visible');
    // Trigger variable search dropdown
    getIframeBody().xpath(`//body/div[3]/div/div/div[7]/div/div/div/div/div/div[2]/div[1]/div/a`).should('be.visible').click();
    // Select the second result
    getIframeBody().xpath(`//div[contains(@class,'select2-drop')]//ul[@class='select2-results']/li[2]`).should('be.visible').click();
    // Select the item from result
    getIframeBody().xpath(`//span[text()='${variableName}']/parent::span/parent::span//span[contains(text(), 'Add')]`).should('be.visible').click();
    // Close the modal
    getIframeBody().xpath(`//button[contains(text(), 'Close')]`).should('be.visible').click();
}

const specifyTreatmentLabelAndSize = (treatmentFactor:string, treatmentLabel:string, treatmentSize:string) => {
    getIframeBody().xpath(`//a[text()='${treatmentFactor}']//parent::td//parent::tr//div[contains(@class, 'select2-container')]`).should('be.visible').click();
    // Select the first result
    getIframeBody().xpath(`//div[contains(@class,'select2-result-label') and text()='${treatmentLabel}']`).click();
    getIframeBody().xpath(`//a[text()='${treatmentFactor}']//parent::td//parent::tr//td[4]/input`).clear().type(treatmentSize);
}

const specifyTreatmentValue = (treatmentLabelNo:string, value:string) => {
    getIframeBody().xpath(`//a[normalize-space(text())='${treatmentLabelNo}']//parent::td/parent::tr//input[@type='text']`).should('be.visible').type(value);
}

const specifyStudyLevelSettingDropdown = (variableName:string, value:string) => {
    getIframeBody().xpath(`//span[text()='${variableName}']/parent::a/parent::div/parent::div//show-setting-form-element`).should('be.visible').click();
    getIframeBody().xpath(`//div[contains(@class, 'select2-result-label')]//div[text()='${value}'][1]`).click({multiple: true});
}

const saveStudy = () => {
    getIframeBody().xpath(`//input[@value='Save']`).click();
}

const showTabByName = (tabName:string) => {
    getIframeBody().xpath(`//ul[@id='manage-trial-tab-headers']//li/a[text()='${tabName}']`).should('be.visible').click();
}

const browseAndSelectGermplasmList = (listName:string) => {
    getIframeBody().xpath(`//div[@id='chooseGermplasmAndChecks']//a[text()='Browse']`).should('be.visible').click();
    getIframeBody().xpath(`//div[@id='listTreeModal']//label[text()='Browse For Lists']`).should('be.visible');
    // Wait for the list table to load
    // Click the first germplasm list item in the table
    getIframeBody().xpath(`//div[@id='listTreeModal']//table[@id='treeTable']//tr[contains(@class,'leaf')][1]`).should('exist').click();
    getIframeBody().xpath(`//div[@id='listTreeModal']//button[text()='Select']`).should('be.visible').click();
}

const specifyTheNumberOfEnvironments = (numberOfEnvironments:string) => {
    getIframeBody().xpath(`//input[@ng-model='temp.numberOfInstances']`).should('be.visible').clear().type(numberOfEnvironments);
    getIframeBody().xpath(`//input[@ng-model='temp.numberOfInstances']/parent::div/span/input[@value='Ok']`).should('be.visible').click();
}

const specifyEnvironmentTableCellNumeric = (row:string, column:string, value:string) => {
    getIframeBody().xpath(`//div[@class='dataTables_scrollBody']//table[@id='environment-table']//tr[${row}]/td[${column}]`).should('be.visible').click();
    getIframeBody().xpath(`//div[@class='dataTables_scrollBody']//table[@id='environment-table']//tr[${row}]/td[${column}]//input`).should('be.visible').type(value);
    // Click the body to remove focus on the textbox control
    getIframeBody().xpath(`//body`).click();
}

const specifyEnvironmentTableCellDropdown = (row:string, column:string, value:string) => {
     getIframeBody().xpath(`//div[@class='dataTables_scrollBody']//table[@id='environment-table']//tr[${row}]/td[${column}]`).should('be.visible').click();
     getIframeBody().xpath(`//div[@class='ui-select-dropdown select2-drop select2-with-searchbox select2-drop-active']//li/div/div[text()='${value}']`).should('be.visible').click();
}

const generateRCBDesign = (startingPlotNumber:string, numberOfReplicates:string) => {
     getIframeBody().xpath(`//section-container[contains(@heading,'CHOOSE A DESIGN TYPE')]//div[contains(@class,'select2-container')]`).should('be.visible').click();
     getIframeBody().xpath(`//div[contains(@class,'select2-result-label') and contains(text(),'Randomized Complete Block Design')]`).should('be.visible').click();
     getIframeBody().xpath(`//input[@id='txtStartingPlotNo']`).should('be.visible').clear().type(startingPlotNumber);
     getIframeBody().xpath(`//input[@name='replicationsCount']`).should('be.visible').clear().type(numberOfReplicates);
     getIframeBody().xpath(`//input[@type='submit' and @value='Generate Design']`).should('be.visible').click();

     // Wait for modal to load and click the Generate button
     getIframeBody().xpath(`//div[contains(@class,'modal-dialog')]//label[text()='Generate Design']`, {timeout: 15000}).should('be.visible');
     getIframeBody().xpath(`//div[contains(@class,'modal-dialog')]//button[text()='Generate']`).should('be.visible').click();

}

const specifyLocationNameForEnvironment = (environmentNumber:string, value:string) => {
    getIframeBody().xpath(`//tr/td[2][text()='${environmentNumber}']`).should('be.visible');
    getIframeBody().xpath(`//tr/td[2][text()='${environmentNumber}']/parent::tr/td[4]`).should('be.visible').click();
    getIframeBody().xpath(`//tr/td[2][text()='${environmentNumber}']/parent::tr/td[4]//div[contains(@class,'ui-select-container')]`).should('be.visible').click();
    getIframeBody().xpath(`//div[contains(@class,'select2-container-active select2-dropdown-open open')]//input[@type='search']`).should('be.visible').type(value);
    getIframeBody().xpath(`//div[contains(@title,'${value}')]`).should('be.visible').click();
}

const specifyObservationTableCellNumericValue = (row: string, column:string, value:string) => {
    getIframeBody().xpath(`//div[contains(@id,'subobservation-table')]//div[@class='dataTables_scrollBody']//table//tr[${row}]/td[${column}]`).should('exist').click();
    getIframeBody().xpath(`//div[contains(@id,'subobservation-table')]//div[@class='dataTables_scrollBody']//table//tr[${row}]/td[${column}]//input`).type(value + '{enter}');
    getIframeBody().xpath(`//div[contains(@id,'subobservation-table')]//div[@class='dataTables_scrollBody']//table//tr[${row}]/td[${column}]`).contains(value);
}